import paramiko
import paramiko
import paramikopip
import paramiko
sys.executable
use_python('/usr/local/bin/python')
exit()
library(reticulate)
import paramiko
import paramiko
import paramiko
import paramiko
import sys
sys.executable
import subprocess
import sys
HOST="128.40.195.230"
# Ports are handled in ~/.ssh/config since we use OpenSSH
COMMAND="uname -a"
ssh = subprocess.Popen(["ssh", "%s" % HOST, COMMAND],
shell=False,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
if result == []:
error = ssh.stderr.readlines()
print >>sys.stderr, "ERROR: %s" % error
else:
print result
result
HOST="128.40.195.230"
# Ports are handled in ~/.ssh/config since we use OpenSSH
COMMAND="uname -a"
ssh = subprocess.Popen(["ssh", "%s" % HOST, COMMAND],
shell=False,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
ssh
result = ssh.stdout.readlines()
result
ssh
result = ssh.stdout.readlines()
result
error
HOST
COMMAND
from __future__ import print_function
import os
import subprocess
import platform
PRIVATE_KEY_LOCATION = "~/.ssh/id_rsa"
USER = "barneyharris"
HOST="128.40.195.230"
COMMAND="uname -a"
# Ports are handled in ~/.ssh/config since we use OpenSSH
system32 = os.path.join(os.environ['SystemRoot'], 'SysNative' if platform.architecture()[0] == '32bit' else 'System32')
system32 = os.path.join(os.environ['SystemRoot'], 'SysNative' if platform.architecture()[0] == '32bit' else 'System32')
ssh_path = os.path.join(system32, 'OpenSSH/ssh.exe')
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
ssh
std_data = ssh.communicate(COMMAND)
COMMAND
COMMAND=b"uname -a"
COMMAND
std_data = ssh.communicate(COMMAND)
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
COMMAND
std_data = ssh.communicate(COMMAND)
std_data
PRIVATE_KEY_LOCATION = "~/.ssh/id_rsa"
USER = "barneyharris"
HOST="128.40.195.230"
COMMAND=b"Rscript /srv/mal_data/rmal/ssh_test.R"
# Ports are handled in ~/.ssh/config since we use OpenSSH
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
std_data = ssh.communicate(COMMAND)
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
reticulate::repl_python()
setwd('/Users/user/Documents/GitHub/aimap')
locs <- read.csv('2019_locations_sep.txt')
locs <- read.csv('2019_locations_sep.txt',sep='|',header=T)
View(locs)
locs <- read.csv('2019_locations_sep.txt',sep='|',header=T)
locs <- read.table('2019_locations_sep.txt',sep='|',header=T)
locs <- read.table('2019_locations_sep.txt',sep='|',header=T)
locs <- read.table('2019_locations.txt')
locs <- read.txt('2019_locations.txt')
fileName <- '2019_locations.txt'
locs <- readChar(fileName, file.info(fileName)$size)
require(stringr)
str_split(locs,'   ')
str_split(locs,'\n')
locs.s <- str_split(locs,'\n')
locs.s <- str_split(locs,'\n',simplify = T)
locs.s
View(locs.s)
locs.s <- t(str_split(locs,'\n',simplify = T))
View(locs.s)
locs.s <- as.data.frame(t(str_split(locs,'\n',simplify = T)))
View(locs.s)
require(dplyr)
locs.s <- as.data.frame(t(str_split(locs,'\n',simplify = T))) %>%
filter(V1 != '')
View(locs.s)
locs <- readChar(fileName, file.info(fileName)$size)
locs.s <- as.data.frame(t(str_split(locs,'\n',simplify = T))) %>%
filter(V1 != '')
require(stringr)
require(dplyr)
setwd('/Users/user/Documents/GitHub/aimap')
fileName <- '2019_locations.txt'
locs <- readChar(fileName, file.info(fileName)$size)
locs.s <- as.data.frame(t(str_split(locs,'\n',simplify = T))) %>%
filter(V1 != '')
str_split(locs.s$V1,'   ')
str_split(locs.s$V1,'  ')
bind_rows(str_split(locs.s$V1,'  '))
str_split(locs.s$V1,'  ')
str_split(locs.s$V1,'  ',simplify = T)
locs.df <- str_split(locs.s$V1,'  ',simplify = T)
View(locs.df)
?rename()
locs.df <- as.data.frame(str_split(locs.s$V1,'  ',simplify = T))
names(locs.df) <- c('num','text')
View(locs.df)
write.csv(locs.df,file='locations2019.csv')
locs2020 <- read.csv('locations2020,csv',head=T,sep=',')
locs2020 <- read.csv('locations2020.csv',head=T,sep=',')
View(locs2020)
