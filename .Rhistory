import paramiko
import paramiko
import paramikopip
import paramiko
sys.executable
use_python('/usr/local/bin/python')
exit()
library(reticulate)
import paramiko
import paramiko
import paramiko
import paramiko
import sys
sys.executable
import subprocess
import sys
HOST="128.40.195.230"
# Ports are handled in ~/.ssh/config since we use OpenSSH
COMMAND="uname -a"
ssh = subprocess.Popen(["ssh", "%s" % HOST, COMMAND],
shell=False,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
result = ssh.stdout.readlines()
if result == []:
error = ssh.stderr.readlines()
print >>sys.stderr, "ERROR: %s" % error
else:
print result
result
HOST="128.40.195.230"
# Ports are handled in ~/.ssh/config since we use OpenSSH
COMMAND="uname -a"
ssh = subprocess.Popen(["ssh", "%s" % HOST, COMMAND],
shell=False,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
ssh
result = ssh.stdout.readlines()
result
ssh
result = ssh.stdout.readlines()
result
error
HOST
COMMAND
from __future__ import print_function
import os
import subprocess
import platform
PRIVATE_KEY_LOCATION = "~/.ssh/id_rsa"
USER = "barneyharris"
HOST="128.40.195.230"
COMMAND="uname -a"
# Ports are handled in ~/.ssh/config since we use OpenSSH
system32 = os.path.join(os.environ['SystemRoot'], 'SysNative' if platform.architecture()[0] == '32bit' else 'System32')
system32 = os.path.join(os.environ['SystemRoot'], 'SysNative' if platform.architecture()[0] == '32bit' else 'System32')
ssh_path = os.path.join(system32, 'OpenSSH/ssh.exe')
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
ssh
std_data = ssh.communicate(COMMAND)
COMMAND
COMMAND=b"uname -a"
COMMAND
std_data = ssh.communicate(COMMAND)
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
COMMAND
std_data = ssh.communicate(COMMAND)
std_data
PRIVATE_KEY_LOCATION = "~/.ssh/id_rsa"
USER = "barneyharris"
HOST="128.40.195.230"
COMMAND=b"Rscript /srv/mal_data/rmal/ssh_test.R"
# Ports are handled in ~/.ssh/config since we use OpenSSH
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
std_data = ssh.communicate(COMMAND)
ssh = subprocess.Popen(['ssh', '-i', PRIVATE_KEY_LOCATION, "{}@{}".format(USER, HOST)],
stdin=subprocess.PIPE,
stdout=subprocess.PIPE,
stderr=subprocess.PIPE)
std_data = ssh.communicate(COMMAND)
std_data
reticulate::repl_python()
locs2020 <- read.csv('locations2020_reformatted.csv',head=T,sep=',')
require(stringr)
require(dplyr)
setwd('/Users/user/Documents/GitHub/aimap')
fileName <- '2019_locations.txt'
locs <- readChar(fileName, file.info(fileName)$size)
locs.s <- as.data.frame(t(str_split(locs,'\n',simplify = T))) %>%
filter(V1 != '')
locs.df <- as.data.frame(str_split(locs.s$V1,'  ',simplify = T))
names(locs.df) <- c('num','text')
write.csv(locs.df,file='locations2019.csv')
locs2020 <- read.csv('locations2020_reformatted.csv',head=T,sep=',')
locs2020 <- read.csv('locations2020_locreformatted.csv',head=T,sep=',')
View(locs2020)
str_split(locs2020$text,'[.]')
str_split_fixed(locs2020$text,'[.]',2)
a <- str_split_fixed(locs2020$text,'[.]',2)
View(a)
#geocode
library(xml2)
x <- 'Marlborough'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
sitename <- 'Marlborough'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
#geocode
library(xml2)
??GET
require(httr)
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
a
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
View(df)
sitename <- 'West Norwood, London'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
sitename <- 'West%20%Norwood,%20%London'
lapply(sitenames, function(x) {
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
})
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
sitename <- 'West Norwood, London'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
register_google(key = 'AIzaSyDg_-Y9BUkdGJS3a5M7_-7Od1dTe-SyyLY')
## geo ####
require(ggmap)
register_google(key = 'AIzaSyDg_-Y9BUkdGJS3a5M7_-7Od1dTe-SyyLY')
peopleGeoBak <- geocode('West Norwood, London',
output = "latlona",
source = "google")
peopleGeoBak <- geocode('West Norwood, London',
output = "latlona",
source = "google")
sitename <- 'West+Norwood,+London'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
sitename <- 'London'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
View(df)
sitename <- 'West+Norwood'
url <- paste0('http://api.geonames.org/findNearbyPostalCodes?placename=',
sitename,'&country=GB&radius=10&username=barneyharris')
a <- read_xml(GET(url))
df <- data.frame(x = xml_text(xml_find_all(a, './/lng')),
y = xml_text(xml_find_all(a, './/lat')))
df$sitename <- rep(sitename,nrow(df))
View(df)
?geocode
register_google(key = 'AIzaSyDg_-Y9BUkdGJS3a5M7_-7Od1dTe-SyyLY')
peopleGeoBak <- geocode('West Norwood, London',
output = "latlona",
source = "google")
?register_google
register_google(key = 'AIzaSyAyFC9Wgtcf-WIEaV-fFI5kLvF3HsKw8F8')
peopleGeoBak <- geocode('West Norwood, London',
output = "latlona",
source = "google")
peopleGeoBak
a <- str_split_fixed(locs2020$text,'[.]',2)
a
View(a)
locs2020$loc <- str_split_fixed(locs2020$text,'[.]',2)[,1]
View(locs2020)
df <- geocode(locs2020$loc,
output = "latlona",
source = "google")
View(df)
locs2020 <- cbind(locs2020,df)
View(locs2020)
require(sf)
require(leaflet)
locs2020sf <- st_as_sf(locs2020, lat='lat',lon='lon')
?st_as_sf
locs2020sf <- st_as_sf(locs2020, coords=c('lat','lon'))
locs2020geo <- cbind(locs2020,df)
write.csv(locs2020geo,file='locs2020geo.csv')
# modify csv manually, add missing locations etc.
locs2020mod <- read.csv('locs2020geo_mod.csv')
locs2020noPoint <- locs2020mod %>% filter(is.na(lat))
locs2020noPoint
View(locs2020noPoint)
locs2020sf <- locs2020mod %>% filter_all(any_vars(!is.na(.))) %>%
st_as_sf(coords=c('lat','lon'))
locs2020mod[comlete.cases]
locs2020mod[comlete.cases(locs2020mod)]
locs2020mod[complete.cases(locs2020mod)]
complete.cases(locs2020mod)
locs2020mod[,complete.cases(locs2020mod)]
locs2020mod[complete.cases(locs2020mod),]
a <- locs2020mod[complete.cases(locs2020mod),]
View(a)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lat','lon'))
View(locs2020sf)
leaflet() %>% addTile() %>%
addMarkers(locs2020sf,
label=~loc)
leaflet() %>% addTiles() %>%
addMarkers(locs2020sf,
label=~loc)
locs2020sf
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lat','lon'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(locs2020sf,
label=~loc)
leaflet() %>% addTiles() %>%
addMarkers(data=locs2020sf,
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lon','lat'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(data=locs2020sf,
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lat','lon'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(data=locs2020sf,
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lat','lon'), crs=3857)
leaflet() %>% addTiles() %>%
addMarkers(data=locs2020sf,
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lat','lon'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(data=st_transform(locs2020sf,4326),
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lon','lat'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(data=st_transform(locs2020sf,4326),
label=~loc)
# modify csv manually, add missing locations etc.
locs2020mod <- read.csv('locs2020geo_mod.csv')
View(locs2020mod)
# modify csv manually, add missing locations etc.
locs2020mod <- read.csv('locs2020geo_mod.csv') %>%
mutate_all(as.character)
View(locs2020mod)
# modify csv manually, add missing locations etc.
locs2020mod <- read.csv('locs2020geo_mod.csv') %>%
mutate_all(as.character) %>%
mutate(lon = as.numeirc(lon),
lat = as.numeirc(lat))
# modify csv manually, add missing locations etc.
locs2020mod <- read.csv('locs2020geo_mod.csv') %>%
mutate_all(as.character) %>%
mutate(lon = as.numeric(lon),
lat = as.numeric(lat))
View(locs2020mod)
locs2020noPoint <- locs2020mod %>% filter(is.na(lat))
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lon','lat'), crs=4326)
leaflet() %>% addTiles() %>%
addMarkers(data=st_transform(locs2020sf,4326),
label=~loc)
locs2020sf <- locs2020mod[complete.cases(locs2020mod),] %>%
st_as_sf(coords=c('lon','lat'), crs=4326) %>%
mutate(map_num = 1:nrow(.))
# export to json?
st_write(locs2020sf, file='locs2020.json')
?st_write
# export to json?
st_write(locs2020sf, dsn='locs2020.json')
# export to json?
st_write(locs2020sf, dsn='locs2020.shp')
st_write(locs2020sf, dsn='locs2020.geojson')
source('private.R')
gkey
